const { Storage } = require('@google-cloud/storage');
const csv = require('csv-parser');

// Initialize the Google Cloud Storage client
const storage = new Storage();

// Define the bucket names and file names
const sourceBucketName = 'cit41200-pdffiles'; // Bucket containing the PDF files
const benignBucketName = 'cit41200-benign'; // Bucket for benign files
const maliciousBucketName = 'cit41200-malicious'; // Bucket for malicious files
const sampleBucketName = 'cit41200-benlynk-pdfmalware-sample'; // Bucket for sample files
const csvFileName = 'PDFMalware2022.csv'; // CSV file containing file names and classifications

// Define the Cloud Function handler
exports.sortPDFFiles = async (event, res) => {
    try {
        const pdfFileName = event.name;

        // Initialize counters for malicious and benign files
        let maliciousCount = 0;
        let benignCount = 0;

        // Access the CSV file in the source bucket
        const csvBucket = storage.bucket(sourceBucketName);
        const csvFile = csvBucket.file(csvFileName);

        // Map to store the classifications of PDF files
        const classFinal = {};

        // Read the CSV file and populate the classification map
        await new Promise((resolve, reject) => {
            csvFile.createReadStream()
                .pipe(csv())
                .on('data', (row) => {
                    // Store the classification of each PDF file in the map
                    classFinal[row.filename] = row.Class;
                })
                .on('error', (error) => {
                    // Log error if reading the CSV file fails
                    console.error('The CSV File cannot be read:', error);
                    reject(error);
                })
                .on('end', () => {
                    // Log when the CSV file has been successfully read
                    console.log('CSV file has been successfully read');
                    resolve();
                });
        });

        // Check if the PDF file exists in the CSV
        if (classFinal.hasOwnProperty(pdfFileName)) {
            // Get the classification of the current PDF file
            const fileClass = classFinal[pdfFileName];

            // Determine the final bucket based on the classification
            const finalBucketName = fileClass === 'Malicious' ? maliciousBucketName : benignBucketName;
            const finalBucket = storage.bucket(finalBucketName);

            // Access the final file in the final bucket
            const finalFile = finalBucket.file(pdfFileName);

            // Copy the PDF file to the final bucket
            const sourceFile = storage.bucket(sourceBucketName).file(pdfFileName);
            await sourceFile.copy(finalFile);

            // Log a message indicating that the PDF file has been copied
            console.log(`The PDF file ${pdfFileName} has been copied to bucket: ${finalBucketName}`);

            // Increment the counter for the final bucket
            if (fileClass === 'Malicious') {
                maliciousCount++;
            } else {
                benignCount++;
            }
        } else {
            // Log a warning if the PDF file is not found in the CSV
            console.warn(`PDF file ${pdfFileName} not found in CSV.`);
        }

        // Send an HTTP response with the counts of malicious and benign files
        res.status(200).send({
            maliciousCount,
            benignCount
        });
    } catch (error) {
        // Handle errors and send an internal server error response
        console.error('An error occurred:', error);
        res.status(500).send('Internal Server Error');
    }
};
